"""Module containing the enums for gadgets"""
import enum
# This file is auto-generated by 'export_enums.py' in 'https://github.com/johannesgrothe/Smarthome_Bridge'


# region GADGET_IDENTIFIER

class GadgetIdentifier(enum.IntEnum):
    """A number identifier for every gadget type"""
    any_gadget = 0
    lamp_neopixel_basic = 1
    lamp_basic = 2
    fan_westinghouse_ir = 3
    lamp_westinghouse_ir = 4
    doorbell_basic = 5
    wallswitch_basic = 6
    sensor_motion_hr501 = 7
    sensor_temperature_dht = 8


def gadget_identifier_to_str(in_ident: GadgetIdentifier) -> str:
    """Translates a enum identifier to a string identifier"""
    switcher = {
        GadgetIdentifier.any_gadget: "any_gadget",
        GadgetIdentifier.lamp_neopixel_basic: "lamp_neopixel_basic",
        GadgetIdentifier.lamp_basic: "lamp_basic",
        GadgetIdentifier.fan_westinghouse_ir: "fan_westinghouse_ir",
        GadgetIdentifier.lamp_westinghouse_ir: "lamp_westinghouse_ir",
        GadgetIdentifier.doorbell_basic: "doorbell_basic",
        GadgetIdentifier.wallswitch_basic: "wallswitch_basic",
        GadgetIdentifier.sensor_motion_hr501: "sensor_motion_hr501",
        GadgetIdentifier.sensor_temperature_dht: "sensor_temperature_dht"
    }
    return switcher.get(in_ident, "any_gadget")


def str_to_gadget_identifier(in_ident: str) -> GadgetIdentifier:
    """Translates a string identifier to a enum identifier"""
    switcher = {
        "any_gadget": GadgetIdentifier.any_gadget,
        "lamp_neopixel_basic": GadgetIdentifier.lamp_neopixel_basic,
        "lamp_basic": GadgetIdentifier.lamp_basic,
        "fan_westinghouse_ir": GadgetIdentifier.fan_westinghouse_ir,
        "lamp_westinghouse_ir": GadgetIdentifier.lamp_westinghouse_ir,
        "doorbell_basic": GadgetIdentifier.doorbell_basic,
        "wallswitch_basic": GadgetIdentifier.wallswitch_basic,
        "sensor_motion_hr501": GadgetIdentifier.sensor_motion_hr501,
        "sensor_temperature_dht": GadgetIdentifier.sensor_temperature_dht
    }
    return switcher.get(in_ident, GadgetIdentifier.any_gadget)

# endregion


# region CHARACTERISTIC_IDENTIFIER

class CharacteristicIdentifier(enum.IntEnum):
    """A number identifier for every characteristic type"""
    err_type = 0
    status = 1
    fanSpeed = 2
    brightness = 3
    hue = 4
    saturation = 5
    temperature = 6
    humidity = 7


def characteristic_identifier_to_str(in_ident: CharacteristicIdentifier) -> str:
    """Translates a enum identifier to a string identifier"""
    switcher = {
        CharacteristicIdentifier.err_type: "err_type",
        CharacteristicIdentifier.status: "status",
        CharacteristicIdentifier.fanSpeed: "fanSpeed",
        CharacteristicIdentifier.brightness: "brightness",
        CharacteristicIdentifier.hue: "hue",
        CharacteristicIdentifier.saturation: "saturation",
        CharacteristicIdentifier.temperature: "temperature",
        CharacteristicIdentifier.humidity: "humidity"
    }
    return switcher.get(in_ident, "err_type")


def str_to_characteristic_identifier(in_ident: str) -> CharacteristicIdentifier:
    """Translates a string identifier to a enum identifier"""
    switcher = {
        "err_type": CharacteristicIdentifier.err_type,
        "status": CharacteristicIdentifier.status,
        "fanSpeed": CharacteristicIdentifier.fanSpeed,
        "brightness": CharacteristicIdentifier.brightness,
        "hue": CharacteristicIdentifier.hue,
        "saturation": CharacteristicIdentifier.saturation,
        "temperature": CharacteristicIdentifier.temperature,
        "humidity": CharacteristicIdentifier.humidity
    }
    return switcher.get(in_ident, CharacteristicIdentifier.err_type)

# endregion


# region CHARACTERISTIC_UPDATE_STATUS

class CharacteristicUpdateStatus(enum.IntEnum):
    """The return type for the characteristic update"""
    general_error = 0
    unknown_characteristic = 1
    update_failed = 2
    no_update_needed = 3
    update_successful = 4


def characteristic_update_status_to_str(in_ident: CharacteristicUpdateStatus) -> str:
    """Translates a enum identifier to a string identifier"""
    switcher = {
        CharacteristicUpdateStatus.general_error: "general_error",
        CharacteristicUpdateStatus.unknown_characteristic: "unknown_characteristic",
        CharacteristicUpdateStatus.update_failed: "update_failed",
        CharacteristicUpdateStatus.no_update_needed: "no_update_needed",
        CharacteristicUpdateStatus.update_successful: "update_successful"
    }
    return switcher.get(in_ident, "general_error")


def str_to_characteristic_update_status(in_ident: str) -> CharacteristicUpdateStatus:
    """Translates a string identifier to a enum identifier"""
    switcher = {
        "general_error": CharacteristicUpdateStatus.general_error,
        "unknown_characteristic": CharacteristicUpdateStatus.unknown_characteristic,
        "update_failed": CharacteristicUpdateStatus.update_failed,
        "no_update_needed": CharacteristicUpdateStatus.no_update_needed,
        "update_successful": CharacteristicUpdateStatus.update_successful
    }
    return switcher.get(in_ident, CharacteristicUpdateStatus.general_error)

# endregion


# region GADGET_METHOD

class GadgetMethod(enum.IntEnum):
    """A number identifier for every gadget method"""
    err_type = 0
    turnOn = 1
    turnOff = 2
    toggleStatus = 3
    brightnessUp = 4
    brightnessDown = 5
    volumeUp = 6
    volumeDown = 7
    mute = 8
    unmute = 9
    toggleMute = 10
    mode0 = 11
    mode1 = 12
    mode2 = 13
    mode3 = 14
    mode4 = 15
    modeUp = 16
    modeDown = 17


def gadget_method_to_str(in_ident: GadgetMethod) -> str:
    """Translates a enum identifier to a string identifier"""
    switcher = {
        GadgetMethod.err_type: "err_type",
        GadgetMethod.turnOn: "turnOn",
        GadgetMethod.turnOff: "turnOff",
        GadgetMethod.toggleStatus: "toggleStatus",
        GadgetMethod.brightnessUp: "brightnessUp",
        GadgetMethod.brightnessDown: "brightnessDown",
        GadgetMethod.volumeUp: "volumeUp",
        GadgetMethod.volumeDown: "volumeDown",
        GadgetMethod.mute: "mute",
        GadgetMethod.unmute: "unmute",
        GadgetMethod.toggleMute: "toggleMute",
        GadgetMethod.mode0: "mode0",
        GadgetMethod.mode1: "mode1",
        GadgetMethod.mode2: "mode2",
        GadgetMethod.mode3: "mode3",
        GadgetMethod.mode4: "mode4",
        GadgetMethod.modeUp: "modeUp",
        GadgetMethod.modeDown: "modeDown"
    }
    return switcher.get(in_ident, "err_type")


def str_to_gadget_method(in_ident: str) -> GadgetMethod:
    """Translates a string identifier to a enum identifier"""
    switcher = {
        "err_type": GadgetMethod.err_type,
        "turnOn": GadgetMethod.turnOn,
        "turnOff": GadgetMethod.turnOff,
        "toggleStatus": GadgetMethod.toggleStatus,
        "brightnessUp": GadgetMethod.brightnessUp,
        "brightnessDown": GadgetMethod.brightnessDown,
        "volumeUp": GadgetMethod.volumeUp,
        "volumeDown": GadgetMethod.volumeDown,
        "mute": GadgetMethod.mute,
        "unmute": GadgetMethod.unmute,
        "toggleMute": GadgetMethod.toggleMute,
        "mode0": GadgetMethod.mode0,
        "mode1": GadgetMethod.mode1,
        "mode2": GadgetMethod.mode2,
        "mode3": GadgetMethod.mode3,
        "mode4": GadgetMethod.mode4,
        "modeUp": GadgetMethod.modeUp,
        "modeDown": GadgetMethod.modeDown
    }
    return switcher.get(in_ident, GadgetMethod.err_type)

# endregion

